<<<<<<< HEAD
we be using Dist::Zilla and git

~/project $ git init
~/project $ git add .
~/project $ git commit -m "first commit"
~/project $ cd ~/Dropbox/git

~/Dropbox/git $ mkdir project.git
~/Dropbox/git $ cd project.git
~/Dropbox/git $ git init --bare
~/Dropbox/git $ cd ~/project

~/project $ git remote add origin ~/Dropbox/git/project.git
~/project $ git push origin master

http://stackoverflow.com/questions/1960799/using-gitdropbox-together-effectively

.dropbox-dist/dropboxd &

FAQ for Carton
I'm already using perlbrew and local::lib. Can I use carton with this?

If you're using local::lib already with perlbrew perl, possibly with the new perlbrew lib command, that's great! There are multiple benefits over using perlbrew and local::lib for development and use Carton for deployment.

The best practice and workflow to get your perl environment as clean as possible with lots of modules installed for quick development would be this:

Install fresh perl using perlbrew. The version should be the same against the version you'll run on the production environment (if any).
Once the installation is done, use perlbrew lib command to create a new local lib environment (let's call it devel) and always use the library as a default environment. Install as many modules as you would like into the devel library path.
This ensures to have a vanilla perl library path as clean as possible.

When you build a new project that you want to manage dependencies via Carton, turn off the devel local::lib and create a new one, like carton. Install Carton and all of its dependencies to the carton local::lib path. Then run carton install like you normally do.
Becuase devel and carton are isolated, the modules you installed into devel doesn't affect the process when carton builds the dependency tree for your new project at all. This could often be critical when you have a conditional dependency in your tree, like Any::Moose.


perl -MDevel::Cover -Ilib t/HackaMol-Molecule.t 
